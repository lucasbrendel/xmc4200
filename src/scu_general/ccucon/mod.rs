# [ doc = r" Value read from the register" ] pub struct R { bits : u32 } # [ doc = r" Value to write to the register" ] pub struct W { bits : u32 } impl super :: CCUCON { # [ doc = r" Modifies the contents of the register" ] # [ inline ] pub fn modify < F > ( & self , f : F ) where for < 'w > F : FnOnce ( & R , & 'w mut W ) -> & 'w mut W { let bits = self . register . get ( ) ; let r = R { bits : bits } ; let mut w = W { bits : bits } ; f ( & r , & mut w ) ; self . register . set ( w . bits ) ; } # [ doc = r" Reads the contents of the register" ] # [ inline ] pub fn read ( & self ) -> R { R { bits : self . register . get ( ) } } # [ doc = r" Writes to the register" ] # [ inline ] pub fn write < F > ( & self , f : F ) where F : FnOnce ( & mut W ) -> & mut W { let mut w = W :: reset_value ( ) ; f ( & mut w ) ; self . register . set ( w . bits ) ; } # [ doc = r" Writes the reset value to the register" ] # [ inline ] pub fn reset ( & self ) { self . write ( | w | w ) } } # [ doc = "Possible values of the field `GSC40`" ] # [ derive ( Clone , Copy , Debug , PartialEq ) ] pub enum GSC40R { # [ doc = "Disable" ] VALUE1 , # [ doc = "Enable" ] VALUE2 , } impl GSC40R { # [ doc = r" Returns `true` if the bit is clear (0)" ] # [ inline ] pub fn bit_is_clear ( & self ) -> bool { ! self . bit ( ) } # [ doc = r" Returns `true` if the bit is set (1)" ] # [ inline ] pub fn bit_is_set ( & self ) -> bool { self . bit ( ) } # [ doc = r" Value of the field as raw bits" ] # [ inline ] pub fn bit ( & self ) -> bool { match * self { GSC40R :: VALUE1 => false , GSC40R :: VALUE2 => true , } } # [ allow ( missing_docs ) ] # [ doc ( hidden ) ] # [ inline ] pub fn _from ( value : bool ) -> GSC40R { match value { false => GSC40R :: VALUE1 , true => GSC40R :: VALUE2 , } } # [ doc = "Checks if the value of the field is `VALUE1`" ] # [ inline ] pub fn is_value1 ( & self ) -> bool { * self == GSC40R :: VALUE1 } # [ doc = "Checks if the value of the field is `VALUE2`" ] # [ inline ] pub fn is_value2 ( & self ) -> bool { * self == GSC40R :: VALUE2 } } # [ doc = "Possible values of the field `GSC41`" ] # [ derive ( Clone , Copy , Debug , PartialEq ) ] pub enum GSC41R { # [ doc = "Disable" ] VALUE1 , # [ doc = "Enable" ] VALUE2 , } impl GSC41R { # [ doc = r" Returns `true` if the bit is clear (0)" ] # [ inline ] pub fn bit_is_clear ( & self ) -> bool { ! self . bit ( ) } # [ doc = r" Returns `true` if the bit is set (1)" ] # [ inline ] pub fn bit_is_set ( & self ) -> bool { self . bit ( ) } # [ doc = r" Value of the field as raw bits" ] # [ inline ] pub fn bit ( & self ) -> bool { match * self { GSC41R :: VALUE1 => false , GSC41R :: VALUE2 => true , } } # [ allow ( missing_docs ) ] # [ doc ( hidden ) ] # [ inline ] pub fn _from ( value : bool ) -> GSC41R { match value { false => GSC41R :: VALUE1 , true => GSC41R :: VALUE2 , } } # [ doc = "Checks if the value of the field is `VALUE1`" ] # [ inline ] pub fn is_value1 ( & self ) -> bool { * self == GSC41R :: VALUE1 } # [ doc = "Checks if the value of the field is `VALUE2`" ] # [ inline ] pub fn is_value2 ( & self ) -> bool { * self == GSC41R :: VALUE2 } } # [ doc = "Possible values of the field `GSC80`" ] # [ derive ( Clone , Copy , Debug , PartialEq ) ] pub enum GSC80R { # [ doc = "Disable" ] VALUE1 , # [ doc = "Enable" ] VALUE2 , } impl GSC80R { # [ doc = r" Returns `true` if the bit is clear (0)" ] # [ inline ] pub fn bit_is_clear ( & self ) -> bool { ! self . bit ( ) } # [ doc = r" Returns `true` if the bit is set (1)" ] # [ inline ] pub fn bit_is_set ( & self ) -> bool { self . bit ( ) } # [ doc = r" Value of the field as raw bits" ] # [ inline ] pub fn bit ( & self ) -> bool { match * self { GSC80R :: VALUE1 => false , GSC80R :: VALUE2 => true , } } # [ allow ( missing_docs ) ] # [ doc ( hidden ) ] # [ inline ] pub fn _from ( value : bool ) -> GSC80R { match value { false => GSC80R :: VALUE1 , true => GSC80R :: VALUE2 , } } # [ doc = "Checks if the value of the field is `VALUE1`" ] # [ inline ] pub fn is_value1 ( & self ) -> bool { * self == GSC80R :: VALUE1 } # [ doc = "Checks if the value of the field is `VALUE2`" ] # [ inline ] pub fn is_value2 ( & self ) -> bool { * self == GSC80R :: VALUE2 } } # [ doc = "Possible values of the field `GSHR0`" ] # [ derive ( Clone , Copy , Debug , PartialEq ) ] pub enum GSHR0R { # [ doc = "Disable" ] VALUE1 , # [ doc = "Enable" ] VALUE2 , } impl GSHR0R { # [ doc = r" Returns `true` if the bit is clear (0)" ] # [ inline ] pub fn bit_is_clear ( & self ) -> bool { ! self . bit ( ) } # [ doc = r" Returns `true` if the bit is set (1)" ] # [ inline ] pub fn bit_is_set ( & self ) -> bool { self . bit ( ) } # [ doc = r" Value of the field as raw bits" ] # [ inline ] pub fn bit ( & self ) -> bool { match * self { GSHR0R :: VALUE1 => false , GSHR0R :: VALUE2 => true , } } # [ allow ( missing_docs ) ] # [ doc ( hidden ) ] # [ inline ] pub fn _from ( value : bool ) -> GSHR0R { match value { false => GSHR0R :: VALUE1 , true => GSHR0R :: VALUE2 , } } # [ doc = "Checks if the value of the field is `VALUE1`" ] # [ inline ] pub fn is_value1 ( & self ) -> bool { * self == GSHR0R :: VALUE1 } # [ doc = "Checks if the value of the field is `VALUE2`" ] # [ inline ] pub fn is_value2 ( & self ) -> bool { * self == GSHR0R :: VALUE2 } } # [ doc = "Values that can be written to the field `GSC40`" ] pub enum GSC40W { # [ doc = "Disable" ] VALUE1 , # [ doc = "Enable" ] VALUE2 , } impl GSC40W { # [ allow ( missing_docs ) ] # [ doc ( hidden ) ] # [ inline ] pub fn _bits ( & self ) -> bool { match * self { GSC40W :: VALUE1 => false , GSC40W :: VALUE2 => true , } } } # [ doc = r" Proxy" ] pub struct _GSC40W < 'a > { w : & 'a mut W } impl < 'a > _GSC40W < 'a > { # [ doc = r" Writes `variant` to the field" ] # [ inline ] pub fn variant ( self , variant : GSC40W ) -> & 'a mut W { { self . bit ( variant . _bits ( ) ) } } # [ doc = "Disable" ] # [ inline ] pub fn value1 ( self ) -> & 'a mut W { self . variant ( GSC40W :: VALUE1 ) } # [ doc = "Enable" ] # [ inline ] pub fn value2 ( self ) -> & 'a mut W { self . variant ( GSC40W :: VALUE2 ) } # [ doc = r" Sets the field bit" ] pub fn set_bit ( self ) -> & 'a mut W { self . bit ( true ) } # [ doc = r" Clears the field bit" ] pub fn clear_bit ( self ) -> & 'a mut W { self . bit ( false ) } # [ doc = r" Writes raw bits to the field" ] # [ inline ] pub fn bit ( self , value : bool ) -> & 'a mut W { const MASK : bool = true ; const OFFSET : u8 = 0 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( value & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = "Values that can be written to the field `GSC41`" ] pub enum GSC41W { # [ doc = "Disable" ] VALUE1 , # [ doc = "Enable" ] VALUE2 , } impl GSC41W { # [ allow ( missing_docs ) ] # [ doc ( hidden ) ] # [ inline ] pub fn _bits ( & self ) -> bool { match * self { GSC41W :: VALUE1 => false , GSC41W :: VALUE2 => true , } } } # [ doc = r" Proxy" ] pub struct _GSC41W < 'a > { w : & 'a mut W } impl < 'a > _GSC41W < 'a > { # [ doc = r" Writes `variant` to the field" ] # [ inline ] pub fn variant ( self , variant : GSC41W ) -> & 'a mut W { { self . bit ( variant . _bits ( ) ) } } # [ doc = "Disable" ] # [ inline ] pub fn value1 ( self ) -> & 'a mut W { self . variant ( GSC41W :: VALUE1 ) } # [ doc = "Enable" ] # [ inline ] pub fn value2 ( self ) -> & 'a mut W { self . variant ( GSC41W :: VALUE2 ) } # [ doc = r" Sets the field bit" ] pub fn set_bit ( self ) -> & 'a mut W { self . bit ( true ) } # [ doc = r" Clears the field bit" ] pub fn clear_bit ( self ) -> & 'a mut W { self . bit ( false ) } # [ doc = r" Writes raw bits to the field" ] # [ inline ] pub fn bit ( self , value : bool ) -> & 'a mut W { const MASK : bool = true ; const OFFSET : u8 = 1 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( value & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = "Values that can be written to the field `GSC80`" ] pub enum GSC80W { # [ doc = "Disable" ] VALUE1 , # [ doc = "Enable" ] VALUE2 , } impl GSC80W { # [ allow ( missing_docs ) ] # [ doc ( hidden ) ] # [ inline ] pub fn _bits ( & self ) -> bool { match * self { GSC80W :: VALUE1 => false , GSC80W :: VALUE2 => true , } } } # [ doc = r" Proxy" ] pub struct _GSC80W < 'a > { w : & 'a mut W } impl < 'a > _GSC80W < 'a > { # [ doc = r" Writes `variant` to the field" ] # [ inline ] pub fn variant ( self , variant : GSC80W ) -> & 'a mut W { { self . bit ( variant . _bits ( ) ) } } # [ doc = "Disable" ] # [ inline ] pub fn value1 ( self ) -> & 'a mut W { self . variant ( GSC80W :: VALUE1 ) } # [ doc = "Enable" ] # [ inline ] pub fn value2 ( self ) -> & 'a mut W { self . variant ( GSC80W :: VALUE2 ) } # [ doc = r" Sets the field bit" ] pub fn set_bit ( self ) -> & 'a mut W { self . bit ( true ) } # [ doc = r" Clears the field bit" ] pub fn clear_bit ( self ) -> & 'a mut W { self . bit ( false ) } # [ doc = r" Writes raw bits to the field" ] # [ inline ] pub fn bit ( self , value : bool ) -> & 'a mut W { const MASK : bool = true ; const OFFSET : u8 = 8 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( value & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = "Values that can be written to the field `GSHR0`" ] pub enum GSHR0W { # [ doc = "Disable" ] VALUE1 , # [ doc = "Enable" ] VALUE2 , } impl GSHR0W { # [ allow ( missing_docs ) ] # [ doc ( hidden ) ] # [ inline ] pub fn _bits ( & self ) -> bool { match * self { GSHR0W :: VALUE1 => false , GSHR0W :: VALUE2 => true , } } } # [ doc = r" Proxy" ] pub struct _GSHR0W < 'a > { w : & 'a mut W } impl < 'a > _GSHR0W < 'a > { # [ doc = r" Writes `variant` to the field" ] # [ inline ] pub fn variant ( self , variant : GSHR0W ) -> & 'a mut W { { self . bit ( variant . _bits ( ) ) } } # [ doc = "Disable" ] # [ inline ] pub fn value1 ( self ) -> & 'a mut W { self . variant ( GSHR0W :: VALUE1 ) } # [ doc = "Enable" ] # [ inline ] pub fn value2 ( self ) -> & 'a mut W { self . variant ( GSHR0W :: VALUE2 ) } # [ doc = r" Sets the field bit" ] pub fn set_bit ( self ) -> & 'a mut W { self . bit ( true ) } # [ doc = r" Clears the field bit" ] pub fn clear_bit ( self ) -> & 'a mut W { self . bit ( false ) } # [ doc = r" Writes raw bits to the field" ] # [ inline ] pub fn bit ( self , value : bool ) -> & 'a mut W { const MASK : bool = true ; const OFFSET : u8 = 24 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( value & MASK ) as u32 ) << OFFSET ; self . w } } impl R { # [ doc = r" Value of the register as raw bits" ] # [ inline ] pub fn bits ( & self ) -> u32 { self . bits } # [ doc = "Bit 0 - Global Start Control CCU40" ] # [ inline ] pub fn gsc40 ( & self ) -> GSC40R { GSC40R :: _from ( { const MASK : bool = true ; const OFFSET : u8 = 0 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) != 0 } ) } # [ doc = "Bit 1 - Global Start Control CCU41" ] # [ inline ] pub fn gsc41 ( & self ) -> GSC41R { GSC41R :: _from ( { const MASK : bool = true ; const OFFSET : u8 = 1 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) != 0 } ) } # [ doc = "Bit 8 - Global Start Control CCU80" ] # [ inline ] pub fn gsc80 ( & self ) -> GSC80R { GSC80R :: _from ( { const MASK : bool = true ; const OFFSET : u8 = 8 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) != 0 } ) } # [ doc = "Bit 24 - Global Start Control HRPWM0" ] # [ inline ] pub fn gshr0 ( & self ) -> GSHR0R { GSHR0R :: _from ( { const MASK : bool = true ; const OFFSET : u8 = 24 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) != 0 } ) } } impl W { # [ doc = r" Reset value of the register" ] # [ inline ] pub fn reset_value ( ) -> W { W { bits : 0 } } # [ doc = r" Writes raw bits to the register" ] # [ inline ] pub unsafe fn bits ( & mut self , bits : u32 ) -> & mut Self { self . bits = bits ; self } # [ doc = "Bit 0 - Global Start Control CCU40" ] # [ inline ] pub fn gsc40 ( & mut self ) -> _GSC40W { _GSC40W { w : self } } # [ doc = "Bit 1 - Global Start Control CCU41" ] # [ inline ] pub fn gsc41 ( & mut self ) -> _GSC41W { _GSC41W { w : self } } # [ doc = "Bit 8 - Global Start Control CCU80" ] # [ inline ] pub fn gsc80 ( & mut self ) -> _GSC80W { _GSC80W { w : self } } # [ doc = "Bit 24 - Global Start Control HRPWM0" ] # [ inline ] pub fn gshr0 ( & mut self ) -> _GSHR0W { _GSHR0W { w : self } } }